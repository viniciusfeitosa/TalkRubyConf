Hey Ho Let's Go (golang)

Vinicius Pacheco 
@ViniciusPach
http://about.me/viniciusfeitosa
https://github.com/viniciusfeitosa

* @ViniciusPach

.image images/vinicius.jpg _ 350

@ViniciusPach
https://github.com/viniciusfeitosa
Analista Desenvolvedor na globo.com
Instrutor na Caelum 

* Hey Ho Let's Go

* História do Go

.image images/imagem1.jpeg _ 400

* Criadores

.image images/imagem2.png

- Robert Griesemer (V8 JavaScript engine, Java HotSpot)
- Rob Pike (UTF-8, Unix)
- Ken Thompson (UTF-8, B, Unix)

* O Problema

.image images/wrong.png

- Muito código legado e difícil de ser mantido
- O código legado era performático
- Dificuldade de escalabilidade

* O Ecossistema do Problema

.image images/c++.png _ 500

- C++ (Muito rápido, mas difícil de ser mantido)
- Java (Rápido, mas ainda sim muito verboso)
- Python (Ótima sintaxe, mas bem lento)

* Quem usa?

.image images/quem_usa.jpg _ 700

* O Meu Problema 

* Acessos X Capacidade 

.image images/gcom.jpg 
- 50 milhões de acesso diários
- 24 horas 7 dias por semana de disponibilidade
- Muita programação concorrente
- Minhas apps nem sempre podem ser estáticas
- O mundo não pode parar e nem ser lento

* Tudo isso e minha app suporta 3k req/seg

* Como era a aplicação problema (Monolito)

.image images/problema1.jpg 

* Como era a aplicação problema (Monolito)

.image images/problema2.jpg 

* Como era a aplicação problema (Monolito)

.image images/problema3.jpg _ 350
- Se comunicavam pelo DB ou por comandos
- As apps escreviam e apagavam o cache uma das outras para coexistir
- Stack muito verbosa e complexa

* Decidimos mudar nossa arquitetura :)

* Microservices

.image images/solucao1.png

* A tecnologia da solução

* 

.image images/arquitetura.png _ 600

* Demo 1

- Fibonacci de 10
- Com escrita de texto
- 2 threads 64 connections em 10 Seg
- wrk -c 64 -d 10s http://localhost:PORT/10

* Foi assim que chegamos em Go

.image images/go1.jpg _ 900

* Caracteristica do Go

* Interfaces

.play code/interfaces.go

* Goroutines

.image images/goroutines.png

* Goroutines

.play code/goroutines.go

* Channels

.play code/channels.go

* Testing

- func TestXxx(*testing.T)
- func BenchmarkXxx(*testing.B)

* HTTP test

.play code/httptest/main.go

* Demo 2

* Onde posso continuar estudando?

.link http://www.casadocodigo.com.br/products/livro-google-go
.link https://golang.org/doc/effective_go.html
.link http://tour.golang.org/#1
.link https://gobyexample.com/
.link https://groups.google.com/forum/#!forum/golang-brasil 

* Dúvidas?

.image images/duvidas.png _ 1000 

